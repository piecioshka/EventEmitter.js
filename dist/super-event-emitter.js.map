{"version":3,"sources":["webpack://EventEmitter/webpack/universalModuleDefinition","webpack://EventEmitter/webpack/bootstrap","webpack://EventEmitter/./index.js","webpack://EventEmitter/./src/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFa;;AAEb,iBAAiB,mBAAO,CAAC,CAAa;;;;;;;;ACFtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEa;;AAEb;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA,uBAAuB,iBAAiB;AACxC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA,WAAW,SAAS;AACpB;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;;AAEb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA","file":"super-event-emitter.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EventEmitter\"] = factory();\n\telse\n\t\troot[\"EventEmitter\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict';\n\nmodule.exports = require('./src/index');\n","/**\n * @author Piotr Kowalski <piecioshka@gmail.com> (https://piecioshka.pl/)\n * @name super-event-emitter\n * @description Lightweight and simple interpretation of popular event management\n * @version 4.1.13\n * @license MIT\n * @example\n * var bar = {}; // Or any other object.\n * EventEmitter.mixin(bar);\n * bar.on('foo', function () {\n *     console.log('foo event emitted');\n * });\n * bar.emit('foo');\n */\n\n'use strict';\n\n// Helpers.\n\nfunction forEach(list, iterator) {\n    var isForEachSupported = ('forEach' in Array.prototype);\n\n    if (isForEachSupported) {\n        list.forEach(iterator);\n    } else {\n        for (var i = 0; i < list.length; i += 1) {\n            iterator(list[i]);\n        }\n    }\n}\n\nfunction filter(list, iterator) {\n    var isFilterSupported = ('filter' in Array.prototype);\n\n    if (isFilterSupported) {\n        return list.filter(iterator);\n    } else {\n        var result = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            var value = list[i];\n\n            if (iterator(value)) {\n                result.push(value);\n            }\n        }\n\n        return result;\n    }\n}\n\nfunction assert(cond, msg) {\n    if (!cond) throw new Error(msg);\n}\n\nfunction isString(arg) {\n    return (typeof arg === 'string');\n}\n\nfunction isFunction(arg) {\n    return (typeof arg === 'function');\n}\n\n/**\n * Add an event listener. Note that this method is not part of the EventEmitter\n *  prototype to avoid polluting the namespace.\n *\n * @access private\n * @param {string} name - Name of event to listen to.\n * @param {Function} fn - The function to represent this listener. Used for\n *  comparison when removing the listener.\n * @param {Function} run - The actual function to run when the named event is\n *  emitted. This can differ if e.g. clean-up is needed. \".once\" uses this.\n * @param {Object} [ctx] - The context to use as \"this\" for the listener.\n */\nfunction addListener(name, fn, run, ctx) {\n    assert(isString(name), 'EventEmitter#on: name is not a string');\n    assert(isFunction(fn), 'EventEmitter#on: fn is not a function');\n\n    // If the context is not passed, use `this`.\n    ctx = ctx || this;\n\n    // Push to private lists of listeners.\n    this._listeners.push({\n        name: name,\n        fn: fn,\n        run: run,\n        ctx: ctx\n    });\n}\n\n// Main part.\n\nvar EventEmitterProto = {\n    /**\n     * Register listener on concrete name with specified handler.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     * @param {Object} [ctx]\n     */\n    on: function (name, fn, ctx) {\n        // For \"on\" functions, the runner is the same as the underlying\n        // function. See \"once\" for when the distinction matters.\n        addListener.call(this, name, fn, fn, ctx);\n        return this;\n    },\n\n    /**\n     * Register listener.\n     * Remove them after once event triggered.\n     *\n     * @param {string} name\n     * @param {Function} fn\n     * @param {Object} [ctx]\n     */\n    once: function (name, fn, ctx) {\n        // If the context is not passed, use `this`.\n        ctx = ctx || this;\n\n        var self = this;\n\n        // Here, we use a different runner function than the added listener.\n        // This enables us to remove the listener after the function runs.\n        function onHandler() {\n            fn.apply(ctx, arguments);\n            self.off(name, fn);\n        }\n\n        addListener.call(this, name, fn, onHandler, ctx);\n\n        return this;\n    },\n\n    /**\n     * Unregister listener.\n     * Remove concrete listener by name and itself definition.\n     *\n     * @param {string} [name]\n     * @param {Function} [fn]\n     */\n    off: function (name, fn) {\n        this._listeners = !name\n            ? []\n            : filter(this._listeners, function (listener) {\n                if (listener.name !== name) {\n                    return true;\n                } else {\n                    if (isFunction(fn)) {\n                        return listener.fn !== fn;\n                    } else {\n                        return false;\n                    }\n                }\n            });\n\n        return this;\n    },\n\n    /**\n     * Trigger event.\n     * All of listeners waiting for emit event will be executed.\n     *\n     * @param {string} name\n     * @param {Object} [params]\n     */\n    emit: function (name, params) {\n        assert(isString(name), 'EventEmitter#emit: name is not a string');\n\n        forEach(this._listeners, function (event) {\n            if (event.name === name) {\n                event.run.call(event.ctx, params);\n            }\n\n            // Special behaviour for wildcard - invoke each event handler.\n            var isWildcard = (/^all|\\*$/).test(event.name);\n\n            if (isWildcard) {\n                event.run.call(event.ctx, name, params);\n            }\n        });\n\n        return this;\n    }\n};\n\n// Aliases.\nEventEmitterProto.addEventListener\n    = EventEmitterProto.addListener\n    = EventEmitterProto.bind\n    = EventEmitterProto.on;\nEventEmitterProto.removeEventListener\n    = EventEmitterProto.removeListener\n    = EventEmitterProto.unbind\n    = EventEmitterProto.off;\nEventEmitterProto.dispatchEventListener\n    = EventEmitterProto.dispatchListener\n    = EventEmitterProto.trigger\n    = EventEmitterProto.emit;\n\nfunction EventEmitter() {\n    if (!(this instanceof EventEmitter)) {\n        return new EventEmitter();\n    }\n\n    this._listeners = [];\n}\n\nEventEmitter.prototype = EventEmitterProto;\n\n/**\n * Mixin properties.\n * Best way to setup EventEmitter on any object.\n *\n * @param {Object} target\n */\nEventEmitter.mixin = function (target) {\n    var emitter = new EventEmitter();\n\n    for (var key in emitter) {\n        target[key] = emitter[key];\n    }\n\n    return target;\n};\n\n// Allow crating new mixed in objects from the instance.\nEventEmitter.prototype.mixin = EventEmitter.mixin;\n\n// Put project version.\nEventEmitter.VERSION = \"4.1.13\";\n\n// To import with destructuring assignment\nEventEmitter.EventEmitter = EventEmitter;\n\n// Exports.\nmodule.exports = EventEmitter;\n"],"sourceRoot":""}